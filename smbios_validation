#!/usr/bin/env python3
#
# Lint as: python3
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019 Google LLC
# Copyright (c) 2023 Dell Inc, or its subsidiaries.
"""Main function to run SMBIOS validation."""

from absl import app
from absl import flags
from dmiparse import DmiParser
from smbios_validation_tool import rules
from smbios_validation_tool.error_bucket import ErrorBucket
from smbios_validation_tool.validator import GroupValidator
import termcolor

FLAGS = flags.FLAGS

flags.DEFINE_string('file', '', 'dmidecode dump file path')


def print_source_code_header():
  """Print header when running the binary."""
  print('*********************************************************************')
  print('SMBIOS OPI Compliance Validation Tool\n')
  print('Copyright (c) 2019 Google LLC')
  print('Copyright (c) 2023 Dell Inc, or its subsidiaries.')
  print('SPDX-License-Identifier: Apache-2.0')
  print(
      '*********************************************************************\n')


def main(argv):
  if len(argv) > 1:
    raise app.UsageError('Too many command-line arguments.')

  print_source_code_header()
  records, groups = DmiParser(FLAGS.file).parse()

  is_less_compliant = True

  # Validate rules for individual SMBIOS record
  error_bucket = ErrorBucket()
  for record in records.values():
    for rule in rules.rules:
      # Not a matched record, no need to validate it
      if not rule.matchers.is_matched_record(record):
        continue
      # Validation passed, no error message to print
      if rule.validators.validate_rule(record, records):
        continue

      is_less_compliant = False
      error_bucket.add_error(record.handle_id, (rule.err_msg, rule.action_msg))

  # Validate groups of SMBIOS records
  if not GroupValidator(records, groups).validate():
    is_less_compliant = False

  # Print error messages
  error_bucket.print_buckets()

  if is_less_compliant:
    print(
        termcolor.colored(
            '**The SMBIOS implementation is OPI compliant.**\n',
            color='green',
            attrs=['bold']))
  else:
    print(
        termcolor.colored(
            '**The SMBIOS implementation lacks OPI compliance.**\n',
            color='red',
            attrs=['bold']))


if __name__ == '__main__':
  app.run(main)
